from github import Auth, Github
from github import GithubException


def create_webhook(host: str, endpoint: str, gh_token: str, integration: str):
    """
    üîó –°–æ–∑–¥–∞—ë—Ç webhook –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    –≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è webhook —á–µ—Ä–µ–∑ PyGithub API.
    –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ "Settings" —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub.
    """

    config = {
        "url": f"{host}webhook/{endpoint}",
        "content_type": "json",
    }
    try:
        auth = Auth.Token(gh_token)
        g = Github(auth=auth)
    except GithubException as e:
        return {"message": "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Github, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª.", "error": e.data}

    events = ["push", "pull_request", "issues", "fork", "star"]

    try:
        repo = g.get_repo(integration)
        repo.create_hook("web", config, events, active=True)
    except GithubException as e:
        return {"message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ webhook, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞.", "error": e.data}


def validate(token: str):
    """
    ‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π Github —Ç–æ–∫–µ–Ω.
    –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ "Settings" –Ω–∞ GitHub.
    """

    if not token.startswith("ghp_"):
        return False

    try:
        auth = Auth.Token(token)
        g = Github(auth=auth)
    except GithubException:
        return False

    try:
        g.get_repo("vsecoder/github-notifi-bot")
    except GithubException:
        return False

    return True


def get_repos(token: str):
    """
    üìú –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyGithub API.
    """

    try:
        auth = Auth.Token(token)
        g = Github(auth=auth)
    except GithubException as e:
        return {"message": "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Github.", "error": e.data}

    try:
        repos = g.get_user().get_repos()
    except GithubException as e:
        return {"message": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.", "error": e.data}

    return repos


def check_repo(token: str, repo: str):
    """
    üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    try:
        auth = Auth.Token(token)
        g = Github(auth=auth)
    except GithubException as e:
        return {"message": "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Github.", "error": e.data}

    try:
        repos = g.get_repo(repo)
    except GithubException as e:
        return {"message": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.", "error": e.data}

    return repos
